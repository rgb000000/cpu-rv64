package cpu

import chisel3.stage.{ChiselGeneratorAnnotation, ChiselStage}
import firrtl.AnnotationSeq

object BazelRunner {
  def main(args: Array[String]): Unit = {
    val max_mem = Runtime.getRuntime.maxMemory() / (1024.0*1024.0)
    println(s"maxMem = $max_mem MB")
    var module_name: Option[String] = None
    def theThingUnderTest = {
      val module = {
        // {MODULECODE}
      }
      module_name = Some("??")
       module
    }
    // if (theArgs(1) != module_name.get) {
    //   System.err.println(
    //     s"Expected module_name to be '${module_name.get}'. Got '${theArgs(1)}'"
    //   )
    //   System.exit(1)
    // }
    println("Generating Verilog for {MODULECODE}")
    println("Generating Verilog for {CONFIGNAME}")
    implicit val p = new {CONFIGNAME}

    var runner: AnnotationSeq = Seq(chisel3.stage.ChiselGeneratorAnnotation(() => new {MODULECODE}))
    val mode = "{MODE}"
    println("Generating Verilog in {MODE} mode")
    if (mode == "genVerilog"){
      runner = runner ++ Seq(
        firrtl.stage.RunFirrtlTransformAnnotation(new AddModulePrefix()),
        ModulePrefixAnnotation("ysyx_210013_")
      )
    }

    (new ChiselStage).execute(
      Array(
        "-X", "verilog",
        "--target-dir", args(0)
      ),
      runner
    )
    println("Success!")
  }
}